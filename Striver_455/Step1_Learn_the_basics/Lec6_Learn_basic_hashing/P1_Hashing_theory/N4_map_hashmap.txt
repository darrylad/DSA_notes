number hashing -> STL / Collection
                   |        |
                   C++     Java 
                  map     hash map
            unorderd map    

we cannot hash numbers above 10^7 using arrays.


map <key, value>.  The number/element is the key.

arr[] = [1, 2, 3, 1, 3, 2]

inside map ->    |        |
                 | (3->2) |
                 | (2->2) |
                 | (1->2) |
                 ----------
this map takes lesser space than an array, as array hashing would require declaring a 13 size array.
Map stores all elements in sorted order.

int main() {
    int n;
    cin >> n;
    int arr[n];
    for(int i=0; i<n; i++) {
        cin >> arr[i];
    }

    // pre-compute
    map<int, int> mpp;
    for (int i = 0; i<n; i++) {
        cin << arr[i];
    }

    // iterate in the map, to show map stores elements in sorted order.
    for (auto it : mpp) {
        cout << it.first << "->" << it.second << endl;
    }

    int q;
    cin>> q;
    while(q--) {
        int number;
        cin >> number;

        // fetch
        cout << mpp[number] << endl;
    }
    return 0;
}


for characters,
map<char, int>


# Time complexity of mapp

storing and fetching takes O(log N) in all cases - best, average, worst.

unordered_map - elements arent stored in a sorted manner.
storing and fetching takes O(1) in average and best case. worst case O(N), but this worst case happens very rarely - due to internal collisions.


# How does hashing work? How is the data structure created/designed?
